import{ac as r,t as i}from"./index-3259d18c.js";import{S as c}from"./suppliers.service-9d62a9c5.js";class u extends r{}class d extends r{async getBetweenDatesAndType(e,t,s){let a=`${this.resource}?startTime=${e}&endTime=${t}`;s&&(a+=`&expenseTypeId=${s}`);const n=await this.apiClient.get(a);if(n.status===200)return n.data}async getConsolidated(e,t,s,a){let n=`${this.resource}/Consolidated?startTime=${e}&endTime=${t}&type=${s}&typeDetail=${a}`;const p=await this.apiClient.get(n);if(p.status===200)return p.data}async getByExpenseType(e){const t=`${this.resource}/ExpenseType/${e}`,s=await this.apiClient.get(t);if(s.status===200)return s.data}}class l extends r{async GetReportDataById(e){const t=`${this.resource}/Report/${e}`,s=await this.apiClient.get(t);if(s.status===200)return s.data}async getBetweenDates(e,t,s,a){let n=`${this.resource}?startTime=${e}&endTime=${t}`;s&&(n+=`&supplierId=${s}`),a&&(n+=`&statusId=${a}`);const p=await this.apiClient.get(n);if(p.status===200)return p.data}async getOrdersToReciptBySupplierId(e){let t=`${this.resource}/ToReceipt?supplierId=${e}`;const s=await this.apiClient.get(t);if(s.status===200)return s.data}async createFromWo(e){return(await this.apiClient.post(`${this.resource}/FromWo`,e)).data}async addDetail(e){return(await this.apiClient.post(`${this.resource}/Detail`,e)).data}async updateDetail(e){return(await this.apiClient.put(`${this.resource}/Detail/${e.id}`,e)).data}async removeDetail(e){return(await this.apiClient.delete(`${this.resource}/Detail/${e}`)).data}async getReceptions(e){const t=await this.apiClient.get(`${this.resource}/${e}/Receptions`);return console.log(t.data),t.data}async addReception(e){return(await this.apiClient.post(`${this.resource}/Reception`,e)).data}async removeReception(e){return(await this.apiClient.delete(`${this.resource}/Reception/${e}`)).data}}class $ extends r{}class h extends r{async GetBetweenDates(e,t){const s=`${this.resource}?startTime=${e}&endTime=${t}`,a=await i.get(s);if(a.status===200)return a.data}async GetBetweenDatesAndStatus(e,t,s){const a=`${this.resource}?startTime=${e}&endTime=${t}&statusId=${s}`,n=await i.get(a);if(n.status===200)return n.data}async GetBetweenDatesAndExcludeStatus(e,t,s){const a=`${this.resource}?startTime=${e}&endTime=${t}&excludeStatusId=${s}`,n=await i.get(a);if(n.status===200)return n.data}async GetBetweenDatesAndSupplier(e,t,s){const a=`${this.resource}?startTime=${e}&endTime=${t}&supplierId=${s}`,n=await i.get(a);if(n.status===200)return n.data}async GetDueDates(e){const t=await i.post(`${this.resource}/DueDates`,e);if(t.status===200)return t.data}async RecreateDueDates(e){return(await i.post(`${this.resource}/RecreateDueDates`,e)).status===200}async UpdateStatuses(e){const t=`${this.resource}/UpdateStatuses`;return(await i.post(t,e)).status===200}async CreateImport(e){const t=`${this.resource}/Import`;return(await i.post(t,e)).status===200}async UpdateImport(e){const t=`${this.resource}/Import/${e.id}`;return(await i.put(t,e)).status===200}async DeleteImport(e){const t=`${this.resource}/Import/${e.id}`;return(await i.delete(t)).status===200}}class y extends r{async getFiltered(e,t,s){let a=`${this.resource}?startTime=${e}&endTime=${t}`;s&&(a+=`&supplierId=${s}`);const n=await this.apiClient.get(a);if(n.status===200)return n.data}async GetInvoiceable(e){let t=`${this.resource}/ToInvoice/${e}`;const s=await this.apiClient.get(t);if(s.status===200)return s.data}async GetByReferenceId(e){let t=`${this.resource}/ByReferenceId/${e}`;const s=await this.apiClient.get(t);if(s.status===200)return s.data}async GetByInvoice(e){let t=`${this.resource}/Invoice/${e}`;const s=await this.apiClient.get(t);if(s.status===200)return s.data}async addDetail(e){return(await this.apiClient.post(`${this.resource}/Detail`,e)).data}async updateDetail(e){return(await this.apiClient.put(`${this.resource}/Detail/${e.id}`,e)).data}async removeDetail(e){return(await this.apiClient.delete(`${this.resource}/Detail/${e}`)).data}async calculateDetailWeightAndPrice(e){return(await this.apiClient.post(`${this.resource}/Detail/Calculate`,e)).data}async getReceptions(e){return(await this.apiClient.get(`${this.resource}/${e}/Receptions`)).data}async addReceptions(e){return(await this.apiClient.post(`${this.resource}/AddReceptions`,e)).data}}const m={PurchaseInvoice:new h("/PurchaseInvoice"),PurchaseInvoiceSerie:new $("/PurchaseInvoiceSerie"),Supplier:new c("/Supplier"),SupplierType:new c("/SupplierType"),Expense:new d("Expense"),ExpenseType:new u("ExpenseType"),Receipt:new y("/Receipt"),Order:new l("/PurchaseOrder")};export{m as E};
